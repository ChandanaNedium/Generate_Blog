# -*- coding: utf-8 -*-
"""Blog(Chatbot).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oik4Dl_4JFLA-d0LrjtrJ6OZXPGkkM5d
"""

from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
import gradio as gr

# Model
model_name = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

generator = pipeline(
    "text-generation",
    model=model,
    tokenizer=tokenizer,
    max_new_tokens=900,  # plenty of room
    temperature=0.7,
    top_p=0.9,
    do_sample=True
)

def generate_blog(title, words, audience):
    words = int(words)
    prompt = (
        f"Write a formal blog post titled '{title}' for {audience}.\n"
        f"The blog must be exactly {words} words long.\n"
        f"Include a clear thesis statement, supporting evidence, examples, and end with a strong, valuable conclusion.\n\n"
        f"Blog:\n"
    )

    raw = generator(prompt, max_new_tokens=words*3)[0]['generated_text']
    content = raw.split("Blog:\n")[-1].strip()

    # Remove repeated title if it appears at start
    # e.g. "About Rose Rose is ..." → "Rose is ..."
    lowered = content.lower()
    lowered_title = title.lower()
    if lowered.startswith(lowered_title):
        # Remove first occurrence of the title
        content = content[len(title):].strip(" .,-:\n")

    content_words = content.split()

    # Fallback conclusion to ensure proper ending
    fallback_conclusion = (
        f"In conclusion, {title} represents a significant topic that continues to inspire interest, "
        "research, and meaningful discussion across the world."
    )
    conclusion_words = fallback_conclusion.split()

    if len(content_words) > words:
        content_words = content_words[:words]
    elif len(content_words) < words:
        while len(content_words) < words:
            needed = words - len(content_words)
            content_words += conclusion_words[:needed]

    content = " ".join(content_words)

    # Add title at the very top
    full_output = f"## {title}\n\n{content}"
    return full_output

# Gradio UI
with gr.Blocks() as demo:
    gr.Markdown("# 📝 Blog Generator ")
    title = gr.Textbox(label="Blog Title", placeholder="Enter the topic of your blog")
    words = gr.Number(label="Word Count", value=100)
    audience = gr.Dropdown(["Researchers", "Students", "Developers"], label="Target Audience")
    output = gr.Textbox(label="Generated Blog", lines=12)

    btn = gr.Button("Generate Blog")
    btn.click(generate_blog, inputs=[title, words, audience], outputs=output)

demo.launch()